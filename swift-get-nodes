#!/usr/bin/env python
# Copyright (c) 2010-2012 OpenStack Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
from optparse import OptionParser

from swift.common.ring import Ring
from swift.cli.info import print_item_locations, InfoSystemExit


if __name__ == '__main__':

    usage = '''
    Shows the nodes responsible for the item specified.
    Usage: %prog [-a] <ring.gz> <account> [<container> [<object>]]
    Or: %prog [-a] <ring.gz> -p partition
    Or: %prog [-a] -P policy_name <account> <container> <object>
    Note: account, container, object can also be a single arg separated by /
    Example:
        $ %prog -a /etc/swift/account.ring.gz MyAccount
        Partition 5743883
        Hash 96ae332a60b58910784e4417a03e1ad0
        10.1.1.7:8000 sdd1
        10.1.9.2:8000 sdb1
        10.1.5.5:8000 sdf1
        10.1.5.9:8000 sdt1 # [Handoff]
    '''
    parser = OptionParser(usage)
    parser.add_option('-a', '--all', action='store_true',
                      help='Show all handoff nodes')
    parser.add_option('-p', '--partition', metavar='PARTITION',
                      help='Show nodes for a given partition')
    parser.add_option('-P', '--policy-name', dest='policy_name',
                      help='Specify which policy to use')
    parser.add_option('-d', '--swift-dir', default='/etc/swift',
                      dest='swift_dir', help='Path to swift directory')
    options, args = parser.parse_args()

    # swift-get-nodes -P nada -p 1
    if len(args) == 0:
        if not options.policy_name or not options.partition:
            sys.exit(parser.print_help())
    elif len(args) > 4 or len(args) < 1:
        sys.exit(parser.print_help())

    # Parse single path arg, as noted in above help text.
    # if len(args) == 1 and options.policy_name and '/' in args[0]:
    if len(args) == 1 and not args[0].endswith('ring.gz'):
        path = args[0].lstrip('/')
        args = [p for p in path.split('/', 2) if p]
    if len(args) == 2 and '/' in args[1]:
        path = args[1].lstrip('/')
        args = [args[0]] + [p for p in path.split('/', 2) if p]

    ring = None
    ring_name = None

    if len(args) >= 1 and args[0].endswith('ring.gz'):
        if os.path.exists(args[0]):
            ring_name = args[0].rsplit('/', 1)[-1].split('.', 1)[0]
            ring = Ring(args[0])
        else:
            print('Ring file does not exist')
        args.pop(0)

    try:
        print_item_locations(ring, ring_name, *args, **vars(options))
    except InfoSystemExit:
        sys.exit(1)
